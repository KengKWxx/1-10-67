# to pull the image
docker pull imsuriyapi/todo-app:v4 

/-----------------pod-----------------/
# to create a pod สร้าง pod ปกติ
kubectl apply -f .\sample-pod.yml 

# to check the pod status
kubectl get pod  

# to delete the pod
kubectl delete all --all
kubectl delete pod xxx


/-----------------deployment-----------------/
# to create a deployment in k8s สร้าง pod ด้วย deployment
kubectl apply -f .\client-deployment.yml
kubectl get pods
kubectl get all

#การทดสอบการทำงานของ Pod ที่สร้างจาก Deployment
#ลบ pod ที่เป็นของ deployment ออก
kubectl delete pods client-deployment-666d95b674-xxx

#ดู pod ที่สร้างขึ้นมาใหม่ เทียบ before กับ after


# to delete the deployment
kubectl delete deployments client-deployment 
kubectl get all 

/-----------------service-----------------/
#---- NodePort ----#
NodePort เป็นหนึ่งในประเภทของ Kubernetes Service ที่ใช้ในการเปิดเผยแอปพลิเคชันที่ทำงานอยู่ใน 
Kubernetes Cluster ไปสู่ภายนอก โดยการเปิดพอร์ตบนทุกๆ Node ภายใน Cluster 
ทำให้ผู้ใช้สามารถเข้าถึงแอปพลิเคชันได้ผ่าน IP ของ Node และพอร์ตที่กำหนด

หลักการทำงานของ NodePort:
1. เมื่อสร้าง NodePort Service ขึ้นมา Kubernetes จะเลือกพอร์ตในช่วง 30000-32767 ให้ (หรือกำหนดเองได้) 
โดยพอร์ตนี้จะเปิดบนทุกๆ Node ใน Cluster เพื่อให้สามารถเข้าถึงแอปพลิเคชันได้ผ่าน <NodeIP>:<NodePort> 
จากภายนอก Cluster
2. NodePort จะทำงานร่วมกับ ClusterIP ซึ่งหมายความว่าภายใน Cluster Pods อื่นๆ 
ก็สามารถเข้าถึงแอปพลิเคชันได้เหมือนกับการใช้ ClusterIP ได้เช่นกัน

# สร้าง NodePort Service สำหรับแอปพลิเคชัน ทั้งหมดในโฟลเดอร์
kubectl apply -f .
หรือกำหนดเองได้
kubectl apply -f .\client-service.yml

http://localhost:30001/
# ทดสอบการทำงานของ Service ด้วย Apache JMeter
ดาวน์โหลด Apache JMeter จาก
https://jmeter.apache.org/download_jmeter.cgi

เลือกดาวน์โหลดไฟล์ .zip สำหรับ Windows
apache-jmeter-5.6.3.zip
แตกไฟล์และเปิดโปรแกรม JMeter

เปิด cmd และ cd ไปยังโฟลเดอร์ bin ของ JMeter
C:\Users\xxx\Downloads\apache-jmeter-5.6.3\bin>

เรียกใช้งาน JMeter GUI โดยพิมพ์: jmeter.bat

#---- ClusterIP ----#
ClusterIP เป็นหนึ่งในประเภทของ Kubernetes Service ที่ใช้เพื่อเปิดเผยบริการ (Service) ที่ทำงานอยู่ภายใน 
Kubernetes Cluster โดยที่บริการนี้สามารถเข้าถึงได้จาก ภายใน Cluster เท่านั้น หมายความว่า ClusterIP 
ไม่สามารถถูกเข้าถึงโดยตรงจากภายนอก Cluster แต่จะทำให้ Pods อื่น ๆ ภายใน Cluster สามารถเข้าถึงได้

คุณสมบัติหลักของ ClusterIP:
1. การเชื่อมต่อภายใน: ClusterIP ช่วยให้ Pods ภายใน Cluster สามารถสื่อสารกันได้โดยไม่ต้องสนใจรายละเอียดของ 
IP ของแต่ละ Pod ซึ่งช่วยให้ระบบที่ถูกปรับขยาย (Scaling) สามารถทำงานร่วมกันได้อย่างราบรื่น
2. Static IP ภายใน Cluster: เมื่อสร้าง ClusterIP Service ขึ้นมา Kubernetes จะกำหนด IP 
ที่สามารถใช้ใน Cluster ให้บริการนั้นเสมอ ทำให้สามารถเรียกใช้ Service ได้โดยอ้างถึง ClusterIP ที่กำหนด

#สร้างไฟล์ ClusterIP Service สำหรับแอปพลิเคชัน
docker pull imsuriyapi/todo-api:v5

สร้างไฟล์ server-deployment.yml
และแก้ไข client-deployment.yml ในโฟลเดอร์ จะเหลือไฟล์ yml 2 ไฟล์ เท่านั้น

# file: server-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: server
  template:
    metadata:
      name: server-pods
      labels:
        app: server
    spec:
      containers:
        - name: server
          image: imsuriyapi/todo-api:v5
---
apiVersion: v1
kind: Service
metadata:
  name: server-service
spec:
  type: NodePort
  selector:
    app: server
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30002


# file: client-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      name: client-pods
      labels:
        app: client
    spec:
      containers:
        - name: client
          image: imsuriyapi/todo-app:v4
---
apiVersion: v1
kind: Service
metadata:
  name: client-service
spec:
  type: NodePort
  selector:
    app: client
  ports: 
    - port: 80
      targetPort: 80
      nodePort: 30001

# สร้าง ClusterIP Service สำหรับแอปพลิเคชัน ทั้งหมดในโฟลเดอร์     
kubectl apply -f .
kubectl get all

#สร้างไฟล์ mongo-deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      name: mongo-pods
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
    - port: 27017
      targetPort: 27017

# run the deployment and service for mongo
kubectl apply -f .\mongo-deployment.yml
kubectl get all

http://localhost:30002/api/health
= ready

http://localhost:30002/api/todo
= []


# ลบ service ของ mongo ออก
kubectl delete services mongo-service
# check IP ของ mongo 
kubectl get all


/-----------------ingress-----------------/


C:\Windows\System32\drivers\etc\hosts

edit file hosts 

#	::1             localhost
127.0.0.1 todo.com
# Added by Docker Desktop

# save and close

http://todo.com/
http://todo.com/api/todo



#Storage (Persistence Volume)
kubectl delete pods mongo-deployment-7d79558597-jkdkd
kubectl get all

เข้า http://todo.com/
ดูว่าข้อมูลยังอยู่หรือไม่


# สร้าง Persistent Volume Claim สำหรับ MongoDB
create file mongo-pvc.yml
#file: mongo-pvc.yml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi #2Gi 3Gi


# run mongo-pvc.yml
kubectl apply -f .\mongo-pvc.yml